/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

rule copy_from_or_to_admin_share_or_sysvol_folder {

  meta:
    author = "Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali"
    description = "Detects a copy command or a copy utility execution to or from an Admin share or remote"
    reference = "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_copy_lateral_movement.yml"
    license = "https://github.com/SigmaHQ/Detection-Rule-License/blob/main/LICENSE.Detection.Rules.md"
    rule_name = "Copy From Or To Admin Share Or Sysvol Folder"
    sigma_uuid = "855bc8b5-2ae8-402e-a9ed-b889e6df1900"
    sigma_status = "test"
    rule_id = "mr_acc184c7-6291-47e2-b65d-c27d60abaa94"
    tactic = "TA0008"
    technique = "T1021.002"
    type = "Detection"
    data_source = "Sysmon"
    platform = "Windows"
    severity = "Medium"
    priority = "Medium"
    false_positives = "Administrative scripts"

  events:
    $process.metadata.event_type = "PROCESS_LAUNCH"
    (
        re.regex($process.target.process.command_line, `\\[a-zA-Z]*\$`) or
        strings.contains(strings.to_lower($process.target.process.command_line), "\\sysvol\\")
    )
    and
    (
        (
            re.regex($process.target.process.file.full_path, `\\robocopy\.exe$`) nocase or
            re.regex($process.target.process.file.full_path, `\\xcopy\.exe$`) nocase or
            $process.src.process.file.full_path = "robocopy.exe" nocase or
            $process.src.process.file.full_path = "xcopy.exe" nocase
        )
        or
        (
            (
                re.regex($process.target.process.file.full_path, `\\cmd\.exe$`) nocase or
                $process.src.process.file.full_path = "cmd.exe" nocase
            )
            and
            strings.contains(strings.to_lower($process.target.process.command_line), "copy")
        )
        or
        (
            (
                strings.contains(strings.to_lower($process.target.process.file.full_path), "\\powershell.exe") or
                strings.contains(strings.to_lower($process.target.process.file.full_path), "\\pwsh.exe") or
                $process.src.process.file.full_path = "powershell.exe" nocase or
                $process.src.process.file.full_path = "pwsh.dll" nocase
            )
            and
            (
                strings.contains(strings.to_lower($process.target.process.command_line), "copy-item") or
                strings.contains(strings.to_lower($process.target.process.command_line), "copy ") or
                strings.contains(strings.to_lower($process.target.process.command_line), "cpi ") or
                strings.contains(strings.to_lower($process.target.process.command_line), " cp ") or
                strings.contains(strings.to_lower($process.target.process.command_line), "move ") or
                strings.contains(strings.to_lower($process.target.process.command_line), "move-item") or
                strings.contains(strings.to_lower($process.target.process.command_line), " mi ") or
                strings.contains(strings.to_lower($process.target.process.command_line), " mv ")
            )
        )
    )
    $process.principal.hostname = $hostname

  match:
    $hostname over 5m

  outcome:
    //example usage of specifying test user and hostname to adjust risk score
    $risk_score = max(if($process.principal.user.userid = "user" and $process.principal.hostname = "hostname", 0, 15))
    $principal_process_pid = array_distinct($process.principal.process.pid)
    $principal_process_command_line = array_distinct($process.principal.process.command_line)
    $principal_process_file_sha256 = array_distinct($process.principal.process.file.sha256)
    $principal_process_file_full_path = array_distinct($process.principal.process.file.full_path)
    $principal_process_product_specfic_process_id = array_distinct($process.principal.process.product_specific_process_id)
    $principal_process_parent_process_product_specfic_process_id = array_distinct($process.principal.process.parent_process.product_specific_process_id)
    $target_process_pid = array_distinct($process.target.process.pid)
    $target_process_command_line = array_distinct($process.target.process.command_line)
    $target_process_file_sha256 = array_distinct($process.target.process.file.sha256)
    $target_process_file_full_path = array_distinct($process.target.process.file.full_path)
    $target_process_product_specfic_process_id = array_distinct($process.target.process.product_specific_process_id)
    $principal_user_userid = array_distinct($process.principal.user.userid)
    $log_type = array_distinct(strings.concat($process.metadata.log_type,"/",$process.metadata.product_event_type))

  condition:
    $process
}
